/*
Copyright 2022 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubesphere.io/schedule/api/schedule/v1alpha1"
)

// AnalysisLister helps list Analysises.
// All objects returned here must be treated as read-only.
type AnalysisLister interface {
	// List lists all Analysises in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Analysis, err error)
	// Analysises returns an object that can list and get Analysises.
	Analysises(namespace string) AnalysisNamespaceLister
	AnalysisListerExpansion
}

// analysisLister implements the AnalysisLister interface.
type analysisLister struct {
	indexer cache.Indexer
}

// NewAnalysisLister returns a new AnalysisLister.
func NewAnalysisLister(indexer cache.Indexer) AnalysisLister {
	return &analysisLister{indexer: indexer}
}

// List lists all Analysises in the indexer.
func (s *analysisLister) List(selector labels.Selector) (ret []*v1alpha1.Analysis, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Analysis))
	})
	return ret, err
}

// Analysises returns an object that can list and get Analysises.
func (s *analysisLister) Analysises(namespace string) AnalysisNamespaceLister {
	return analysisNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalysisNamespaceLister helps list and get Analysises.
// All objects returned here must be treated as read-only.
type AnalysisNamespaceLister interface {
	// List lists all Analysises in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Analysis, err error)
	// Get retrieves the Analysis from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Analysis, error)
	AnalysisNamespaceListerExpansion
}

// analysisNamespaceLister implements the AnalysisNamespaceLister
// interface.
type analysisNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Analysises in the indexer for a given namespace.
func (s analysisNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Analysis, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Analysis))
	})
	return ret, err
}

// Get retrieves the Analysis from the indexer for a given namespace and name.
func (s analysisNamespaceLister) Get(name string) (*v1alpha1.Analysis, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analysis"), name)
	}
	return obj.(*v1alpha1.Analysis), nil
}
